""" Decorators module """
from numpy.create import _extract_shape

from sequre.types.sharetensor import Sharetensor


def flatten(idx: Static[int]):
    def _flatten_args(args):
        return () if staticlen(args) == 0 else (
             args[0].flatten(), *_flatten_args(args[1:]))

    def _reshape_args(args, shape):
        return () if staticlen(args) == 0 else (
             args[0].reshape(shape), *_reshape_args(args[1:], shape))
    
    def decorator(foo):
        def wrapper(mpc, *args):
            if isinstance(args[idx], ByVal):
                    return foo(mpc, *args)
            
            if isinstance(args[idx], Sharetensor):
                if staticlen(_extract_shape(args[idx].share)) < 2:
                    return foo(mpc, *args)
            
            shape = args[idx].shape
            flat_args = (*_flatten_args(args[:idx + 1]), *args[idx + 1:])
            result = foo(mpc, *flat_args)
            
            if isinstance(result, tuple):
                return _reshape_args(result, shape)
            
            return result.reshape(shape)
        return wrapper
    return decorator
